---
import {
	getNotionPosts,
	type NotionPostSummary,
	getNotionContentVersion,
} from "../../lib/notion";
import DefautLayout from "../../layouts/Layout.astro";

export const prerender = false;

const posts = await getNotionPosts();
const contentVersion = await getNotionContentVersion();

const postsByYear = posts.reduce<Record<number, NotionPostSummary[]>>((groups, post) => {
	if (!post.createdAt) {
		return groups;
	}

	const year = new Date(post.createdAt).getFullYear();
	if (!groups[year]) {
		groups[year] = [];
	}
	groups[year].push(post);
	return groups;
}, {});
---

<DefautLayout
	title="Zwinkle Blog, sekilas kehidupan"
	description="Sekilas kisah kehidupan saya sebagai Mahasiswa (untuk sekarang ini, besok tidak tahu)">
	<div class="grid gap-6 mt-32 max-w-3xl mx-auto px-12 mb-20 slide-enter-content">
		<h1>
			<span class="text-3xl lg:text-4xl font-bold font-lexend">Blog</span>
			<span class="font-light text-sm">Zwinkle Blog, sekilas kehidupan</span>
		</h1>
		<p>
			Sekilas kisah kehidupan saya sebagai Mahasiswa (untuk sekarang ini, besok tidak tahu)
		</p>
		{
			Object.entries(postsByYear)
				.sort(([a], [b]) => parseInt(b) - parseInt(a))
				.map(([year, yearlyPosts], yearIndex) => (
					<div class="my-12 relative">
						<div
							class="text-2xl font-bold absolute -z-50 font-lexend text-9xl -top-12 -left-12 opacity-10 text-stroke dark:(text-d-base) text-l-base"
							style={`--enter-stage: ${yearIndex + yearlyPosts.length + 2} !important;`}>
							{year}
						</div>
					<ul class="mt-4 z-50 gap-4 grid slide-enter-content">
						{yearlyPosts
							.sort((a, b) => {
								const dateA = a.createdAt ? new Date(a.createdAt).getTime() : 0;
								const dateB = b.createdAt ? new Date(b.createdAt).getTime() : 0;
								return dateB - dateA;
							})
							.map((post, postIndex: number) => (
								<li
									class="mt-2 relative"
									style={`--enter-stage: ${yearIndex > 0 ? yearIndex : ""}${postIndex + 2} !important;`}>
									<a
										href={`/blog/${post.slug}`}
										class="inline-block duration-200 transition-all transform inline-flex items-end gap-4 opacity-90 hover:opacity-100">
										<p>
											{post.title}
											<span class="text-xs text-gray-500 inline-block">
												{post.createdAt
													? new Date(post.createdAt).toLocaleDateString("en-US", {
														day: "2-digit",
														month: "long",
													})
													: ""}
												</span>
											</p>
										</a>
									</li>
								))}
						</ul>
					</div>
				))
		}
	</div>
	<script is:inline define:vars={{ initialVersion: contentVersion ?? null }}>
		(() => {
			let currentVersion = initialVersion;
			const intervalMs = 15000;

			async function checkForUpdates() {
				try {
					const response = await fetch("/api/notion/updates.json", {
						cache: "no-store",
						headers: { "Cache-Control": "no-store" },
					});
					if (!response.ok) {
						return;
					}
					const data = await response.json();
					const nextVersion = data?.updatedAt ?? null;
					if (!nextVersion) {
						return;
					}
					if (!currentVersion) {
						currentVersion = nextVersion;
						return;
					}
					if (currentVersion !== nextVersion) {
						window.location.reload();
					}
				} catch (error) {
					console.debug("notion update poll failed", error);
				}
			}

			setInterval(checkForUpdates, intervalMs);
		})();
	</script>
</DefautLayout>