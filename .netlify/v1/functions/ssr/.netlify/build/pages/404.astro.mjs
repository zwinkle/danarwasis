/* empty css                                  */
import { c as createComponent, r as renderTemplate, a as renderComponent, m as maybeRenderHead, b as addAttribute } from '../chunks/astro/server_DwqtjhkU.mjs';
import 'kleur/colors';
import { $ as $$Layout } from '../chunks/Layout_D9HZCX9x.mjs';
export { renderers } from '../renderers.mjs';

var __freeze = Object.freeze;
var __defProp = Object.defineProperty;
var __template = (cooked, raw) => __freeze(__defProp(cooked, "raw", { value: __freeze(raw || cooked.slice()) }));
var _a;
const prerender = false;
const $$404 = createComponent(($$result, $$props, $$slots) => {
  return renderTemplate(_a || (_a = __template(["", ' <script>\n	console.log("Eyes animation credited to Zed Dash on https://codepen.io/z-/pen/wvBPvby, with some modification");\n\n	let states = {\n		neutral: {\n			face: {\n				rotationX: 0,\n				rotationY: 0,\n				rotationZ: 0,\n			},\n			left: {\n				lower: {\n					rotation: 0,\n					position: 0,\n				},\n				upper: {\n					rotation: 0,\n					position: 0,\n				},\n			},\n			right: {\n				lower: {\n					rotation: 0,\n					position: 0,\n				},\n				upper: {\n					rotation: 0,\n					position: 0,\n				},\n			},\n		},\n		sad: {\n			face: {\n				rotationX: 0,\n				rotationY: 0,\n				rotationZ: 0,\n			},\n			left: {\n				lower: {\n					rotation: 0,\n					position: 0,\n				},\n				upper: {\n					rotation: -20,\n					position: 40,\n				},\n			},\n			right: {\n				lower: {\n					rotation: 0,\n					position: 0,\n				},\n				upper: {\n					rotation: 20,\n					position: 40,\n				},\n			},\n		},\n		\n		pain: {\n			face: {\n				rotationX: 0,\n				rotationY: 0,\n				rotationZ: 0,\n			},\n			left: {\n				lower: {\n					rotation: 10,\n					position: 20,\n				},\n				upper: {\n					rotation: -10,\n					position: 20,\n				},\n			},\n			right: {\n				lower: {\n					rotation: -10,\n					position: 20,\n				},\n				upper: {\n					rotation: 10,\n					position: 20,\n				},\n			},\n		},\n	};\n\n	let face = document.querySelector(".face");\n	const setState = (state) => {\n		if (states[state] == undefined) return;\n		face.setAttribute(\n			"style",\n			`\n        --left-lower-rotation:${states[state].left.lower.rotation}deg;\n        --left-lower-position:${states[state].left.lower.position}%;\n        --left-upper-rotation:${states[state].left.upper.rotation}deg;\n        --left-upper-position:${states[state].left.upper.position}%;\n        --right-lower-rotation:${states[state].right.lower.rotation}deg;\n        --right-lower-position:${states[state].right.lower.position}%;\n        --right-upper-rotation:${states[state].right.upper.rotation}deg;\n        --right-upper-position:${states[state].right.upper.position}%;\n        --face-rotation-x:${states[state].face.rotationX}deg;\n        --face-rotation-y:${states[state].face.rotationY}deg;\n        --face-rotation-z:${states[state].face.rotationZ}deg;\n    `\n		);\n	};\n\n	let emotions = Object.keys(states);\n	let previous = ["sad"];\n	setState("sad");\n\n	const nextState = () => {\n		let ind = Math.floor(Math.random() * emotions.length);\n		if (previous.indexOf(ind) != -1) return nextState();\n		previous.push(ind);\n		previous = previous.slice(-2);\n		return ind;\n	};\n\n	setInterval(() => {\n		setState(emotions[nextState()]);\n	}, 1500);\n<\/script> <style>\n	@keyframes float {\n		0%,\n		100% {\n			transform: translateY(-5%);\n		}\n		50% {\n			transform: translateY(5%);\n		}\n	}\n	body .face {\n		--left-lower-rotation: 0deg;\n		--left-lower-position: 0%;\n		--left-upper-rotation: 0deg;\n		--left-upper-position: 0%;\n		--right-lower-rotation: 0deg;\n		--right-lower-position: 0%;\n		--right-upper-rotation: 0deg;\n		--right-upper-position: 0%;\n		--face-rotation-x: 0deg;\n		--face-rotation-y: 0deg;\n		--face-rotation-z: 0deg;\n		display: grid;\n		grid-template-columns: var(--eye-size) var(--eye-gap) var(--eye-size);\n		grid-template-rows: var(--eye-size);\n		grid-template-areas: "left . right";\n		filter: blur(4px) contrast(8);\n		transform: translateZ(8vmin) rotateX(var(--face-rotation-x)) rotateY(var(--face-rotation-y)) rotateZ(var(--face-rotation-z));\n		transition: 0.75s cubic-bezier(0.25, 0.5, 0.5, 1);\n		mix-blend-mode: lighten;\n	}\n	body .face .eye {\n		position: relative;\n		background: black;\n		border-radius: 100%;\n		overflow: hidden;\n		box-shadow: 0 0 0 8px white;\n	}\n	body .face .eye,\n	body .face .eye * {\n		transition: 0.5s cubic-bezier(0.75, 0.25, 0.25, 0.75);\n	}\n	body .face .eye > div {\n		--rotation: 0deg;\n		--position: 0%;\n		position: absolute;\n		top: 0;\n		left: 0;\n		width: 100%;\n		height: 100%;\n		transform: rotate(var(--rotation));\n	}\n	body .face .eye > div .lid {\n		position: absolute;\n		width: 100%;\n		height: 100%;\n		background: white;\n	}\n	body .face .eye > div.lower .lid {\n		top: calc(100% - var(--position));\n	}\n	body .face .eye > div.upper .lid {\n		bottom: calc(100% - var(--position));\n	}\n	body .face .eye.left {\n		grid-area: left;\n	}\n	body .face .eye.left .lower {\n		--rotation: var(--left-lower-rotation);\n		--position: var(--left-lower-position);\n	}\n	body .face .eye.left .upper {\n		--rotation: var(--left-upper-rotation);\n		--position: var(--left-upper-position);\n	}\n	body .face .eye.right {\n		grid-area: right;\n	}\n	body .face .eye.right .lower {\n		--rotation: var(--right-lower-rotation);\n		--position: var(--right-lower-position);\n	}\n	body .face .eye.right .upper {\n		--rotation: var(--right-upper-rotation);\n		--position: var(--right-upper-position);\n	}\n\n    @keyframes float {\n        0%,\n        100% {\n            transform: translateY(-1%);\n        }\n        50% {\n            transform: translateY(1%);\n        }\n    }\n\n    #ghost{\n        animation: float 2s ease-in-out infinite;\n    }\n</style>'], ["", ' <script>\n	console.log("Eyes animation credited to Zed Dash on https://codepen.io/z-/pen/wvBPvby, with some modification");\n\n	let states = {\n		neutral: {\n			face: {\n				rotationX: 0,\n				rotationY: 0,\n				rotationZ: 0,\n			},\n			left: {\n				lower: {\n					rotation: 0,\n					position: 0,\n				},\n				upper: {\n					rotation: 0,\n					position: 0,\n				},\n			},\n			right: {\n				lower: {\n					rotation: 0,\n					position: 0,\n				},\n				upper: {\n					rotation: 0,\n					position: 0,\n				},\n			},\n		},\n		sad: {\n			face: {\n				rotationX: 0,\n				rotationY: 0,\n				rotationZ: 0,\n			},\n			left: {\n				lower: {\n					rotation: 0,\n					position: 0,\n				},\n				upper: {\n					rotation: -20,\n					position: 40,\n				},\n			},\n			right: {\n				lower: {\n					rotation: 0,\n					position: 0,\n				},\n				upper: {\n					rotation: 20,\n					position: 40,\n				},\n			},\n		},\n		\n		pain: {\n			face: {\n				rotationX: 0,\n				rotationY: 0,\n				rotationZ: 0,\n			},\n			left: {\n				lower: {\n					rotation: 10,\n					position: 20,\n				},\n				upper: {\n					rotation: -10,\n					position: 20,\n				},\n			},\n			right: {\n				lower: {\n					rotation: -10,\n					position: 20,\n				},\n				upper: {\n					rotation: 10,\n					position: 20,\n				},\n			},\n		},\n	};\n\n	let face = document.querySelector(".face");\n	const setState = (state) => {\n		if (states[state] == undefined) return;\n		face.setAttribute(\n			"style",\n			\\`\n        --left-lower-rotation:\\${states[state].left.lower.rotation}deg;\n        --left-lower-position:\\${states[state].left.lower.position}%;\n        --left-upper-rotation:\\${states[state].left.upper.rotation}deg;\n        --left-upper-position:\\${states[state].left.upper.position}%;\n        --right-lower-rotation:\\${states[state].right.lower.rotation}deg;\n        --right-lower-position:\\${states[state].right.lower.position}%;\n        --right-upper-rotation:\\${states[state].right.upper.rotation}deg;\n        --right-upper-position:\\${states[state].right.upper.position}%;\n        --face-rotation-x:\\${states[state].face.rotationX}deg;\n        --face-rotation-y:\\${states[state].face.rotationY}deg;\n        --face-rotation-z:\\${states[state].face.rotationZ}deg;\n    \\`\n		);\n	};\n\n	let emotions = Object.keys(states);\n	let previous = ["sad"];\n	setState("sad");\n\n	const nextState = () => {\n		let ind = Math.floor(Math.random() * emotions.length);\n		if (previous.indexOf(ind) != -1) return nextState();\n		previous.push(ind);\n		previous = previous.slice(-2);\n		return ind;\n	};\n\n	setInterval(() => {\n		setState(emotions[nextState()]);\n	}, 1500);\n<\/script> <style>\n	@keyframes float {\n		0%,\n		100% {\n			transform: translateY(-5%);\n		}\n		50% {\n			transform: translateY(5%);\n		}\n	}\n	body .face {\n		--left-lower-rotation: 0deg;\n		--left-lower-position: 0%;\n		--left-upper-rotation: 0deg;\n		--left-upper-position: 0%;\n		--right-lower-rotation: 0deg;\n		--right-lower-position: 0%;\n		--right-upper-rotation: 0deg;\n		--right-upper-position: 0%;\n		--face-rotation-x: 0deg;\n		--face-rotation-y: 0deg;\n		--face-rotation-z: 0deg;\n		display: grid;\n		grid-template-columns: var(--eye-size) var(--eye-gap) var(--eye-size);\n		grid-template-rows: var(--eye-size);\n		grid-template-areas: "left . right";\n		filter: blur(4px) contrast(8);\n		transform: translateZ(8vmin) rotateX(var(--face-rotation-x)) rotateY(var(--face-rotation-y)) rotateZ(var(--face-rotation-z));\n		transition: 0.75s cubic-bezier(0.25, 0.5, 0.5, 1);\n		mix-blend-mode: lighten;\n	}\n	body .face .eye {\n		position: relative;\n		background: black;\n		border-radius: 100%;\n		overflow: hidden;\n		box-shadow: 0 0 0 8px white;\n	}\n	body .face .eye,\n	body .face .eye * {\n		transition: 0.5s cubic-bezier(0.75, 0.25, 0.25, 0.75);\n	}\n	body .face .eye > div {\n		--rotation: 0deg;\n		--position: 0%;\n		position: absolute;\n		top: 0;\n		left: 0;\n		width: 100%;\n		height: 100%;\n		transform: rotate(var(--rotation));\n	}\n	body .face .eye > div .lid {\n		position: absolute;\n		width: 100%;\n		height: 100%;\n		background: white;\n	}\n	body .face .eye > div.lower .lid {\n		top: calc(100% - var(--position));\n	}\n	body .face .eye > div.upper .lid {\n		bottom: calc(100% - var(--position));\n	}\n	body .face .eye.left {\n		grid-area: left;\n	}\n	body .face .eye.left .lower {\n		--rotation: var(--left-lower-rotation);\n		--position: var(--left-lower-position);\n	}\n	body .face .eye.left .upper {\n		--rotation: var(--left-upper-rotation);\n		--position: var(--left-upper-position);\n	}\n	body .face .eye.right {\n		grid-area: right;\n	}\n	body .face .eye.right .lower {\n		--rotation: var(--right-lower-rotation);\n		--position: var(--right-lower-position);\n	}\n	body .face .eye.right .upper {\n		--rotation: var(--right-upper-rotation);\n		--position: var(--right-upper-position);\n	}\n\n    @keyframes float {\n        0%,\n        100% {\n            transform: translateY(-1%);\n        }\n        50% {\n            transform: translateY(1%);\n        }\n    }\n\n    #ghost{\n        animation: float 2s ease-in-out infinite;\n    }\n</style>'])), renderComponent($$result, "Layout", $$Layout, { "title": "Walah, nyasar", "description": "Halaman yang kamu cari bukan disini." }, { "default": ($$result2) => renderTemplate` ${maybeRenderHead()}<div class="flex min-h-80vh p-12 max-w-6xl mx-auto relative items-center justify-center"> <main class="flex flex-col gap-2 slide-enter-content max-w-sm text-center bg-gradient-to-t from-#101417 to-#212a34 p-8 rounded-3xl"> <h1 class="text-center text-3xl font-bold text-#e5e7eb">404</h1> <div class="w-full h-full max-w-xs max-h-xs relative mx-auto flex items-center justify-center my-4"> <div class="flex flex-col" id="ghost"> <div id="ghost-body" class="rounded-t-full w32 h34 grid place-items-center bg-white"></div> <div class="grid place-items-center absolute top-12 z-100 left-1/2 -translate-x-1/2"> <div class="face w-20 h7" style="--left-lower-rotation:20deg;--left-lower-position:40%;--left-upper-rotation:0deg;--left-upper-position:0%;--right-lower-rotation:-20deg;--right-lower-position:40%;--right-upper-rotation:0deg;--right-upper-position:0%;--face-rotation-x:0deg;--face-rotation-y:0deg;--face-rotation-z:0deg;"> <div class="eye left"> <div class="lower"> <div class="lid"></div> </div> <div class="upper"> <div class="lid"></div> </div> </div> <div class="eye right"> <div class="lower"> <div class="lid"></div> </div> <div class="upper"> <div class="lid"></div> </div> </div> </div> </div> <div id="ghost-bottom" class="grid grid-cols-5 w-full -mt-4 z-2"> ${Array.from({ length: 5 }).map((_, i) => renderTemplate`<div${addAttribute(["w-full h7 rounded-50px", i % 2 === 0 ? "bg-white" : "bg-#151b20"], "class:list")}></div>`)} </div> </div> </div> <h2 class="text-center text-lg text-white">Lah!?</h2> <p class="text-center text-gray-400">Halaman yang kamu cari bukan disini.</p> <a href="/" class="text-center text-white underline">Ke Beranda</a> </main> </div> ` }));
}, "D:/code/PORTOFOLIO/danarwasis/src/pages/404.astro", void 0);

const $$file = "D:/code/PORTOFOLIO/danarwasis/src/pages/404.astro";
const $$url = "/404";

const _page = /*#__PURE__*/Object.freeze(/*#__PURE__*/Object.defineProperty({
	__proto__: null,
	default: $$404,
	file: $$file,
	prerender,
	url: $$url
}, Symbol.toStringTag, { value: 'Module' }));

const page = () => _page;

export { page };
