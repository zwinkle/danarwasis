---
import BlogPost from "../../layouts/BlogPost.astro";
import type { MarkdownHeading } from "astro";
import {
	getNotionPost,
	getNotionPosts,
} from "../../lib/notion";

export const prerender = false;

const posts = await getNotionPosts();
const numOfPost = posts.length;
const params = Astro.params.slug;
const postIndex = posts.findIndex((post) => post.slug === params);
const postDetail = params ? await getNotionPost(params) : null;
function getAtIndex(index: number) {
	const target = posts[index];
	return target
		? {
			title: target.title,
			slug: target.slug,
		}
		: null;
}

function getExcerpt(html: string, sentences = 1): string {
	if (!html) return "";

	const plainText = html.replace(/<[^>]*>/g, " ");

	const cleanText = plainText.replace(/\s+/g, " ").trim();

	const words = cleanText.split(".");
	const excerpt = words.slice(0, sentences).join(".");

	return excerpt.trim();
}

if (!postDetail || postIndex === -1) {
	return Astro.rewrite("/404");
}

const pageData = {
	post: {
		html: postDetail.html,
		thumbnail: postDetail.thumbnail,
		title: postDetail.title,
		slug: postDetail.slug,
		description: getExcerpt(postDetail.html, 1),
		pubDate: new Date(postDetail.createdAt ?? new Date()),
		createdAt: postDetail.createdAt,
		updatedAt: postDetail.updatedAt,
		id: postDetail.id,
		headings: postDetail.headings,
		credit: postDetail.credit,
		tags: postDetail.tags,
	},
	numOfPost,
	params,
	postIndex,
};
const prevPost = getAtIndex(postIndex);
const nextPost = getAtIndex(postIndex);
// const prevPost = postIndex > 0 ? getAtIndex(postIndex - 1) : null;
// const nextPost = postIndex < numOfPost - 1 ? getAtIndex(postIndex + 1) : null;
const serializedPost = JSON.stringify(pageData.post).replace(/</g, "\\u003c");
---


<BlogPost
	title={pageData.post.title}
	thumbnail={pageData.post.thumbnail!}
	pubDate={pageData.post.pubDate}
	description={pageData.post.description}
	caption={pageData.post.credit ?? undefined}
	headings={pageData.post.headings as MarkdownHeading[]}>
	<section set:html={pageData.post.html} />
	
	<div class="grid gap-2">
		<div>
			<p>Tags:</p>
			<div class="flex gap-2 flex-wrap">
				{
					pageData.post.tags.map((tag) => (
						<a href={`/blog/tags/${tag}`} class="btn-normal decoration-none font-normal px-4">
							<span>{tag}</span>
						</a>
					))
				}
			</div>
		</div>
		<hr class="w-20 mx-auto px-10vw bg-gray h-1px opacity50" />
		
		<a
			href="/blog">
			<span class="inline-flex opacity50 items-center lg:justify-end gap-2 mt-4">
				<i class="i-myna-chevron-double-left" /> Kembali ke Blog
			</span>
		</a>
		<div class="grid lg:grid-cols-2 gap-2 mt-2">
			<div>
				{
					prevPost && (
						<a
							href={`/blog/${prevPost.slug}`}
							class="btn-normal decoration-none opacity-75 hover:(opacity-100 bg-#30344620) rounded-md transition-all duration-300 ease-in-out text-left flex flex-col gap-2 p-4">
							<span class="inline-flex opacity50 items-center gap-2">
								<i class="i-myna-chevron-double-left" /> Sebelumnya
							</span>
							<span>{prevPost.title}</span>
						</a>
					)
				}
			</div>

			<div>
				{
					nextPost && (
						<a
							href={`/blog/${nextPost.slug}`}
							class="btn-normal decoration-none opacity-75 hover:(opacity-100 bg-#30344620) rounded-md transition-all duration-300 ease-in-out flex flex-col gap-2 p-4 text-left lg:text-right">
							<span class="inline-flex opacity50 items-center lg:justify-end gap-2">
								Selanjutnya <i class="i-myna-chevron-double-right" />
							</span>
							<span>{nextPost.title}</span>
						</a>
					)
				}
			</div>
		</div>
	</div>
</BlogPost>

<script type="application/json" data-blog-post-detail data-blog-slug={params} set:html={serializedPost} is:inline></script>
<script type="module" is:inline>
	const detailScript = document.querySelector("script[data-blog-post-detail]");
	const slug = detailScript?.dataset.blogSlug ?? "";
	if (!slug || !detailScript) {
		console.warn("Blog detail auto-refresh: missing slug or data script");
	} else {
		let currentPost = null;
		try {
			const raw = detailScript.textContent?.trim() ?? "{}";
			currentPost = normalizePost(JSON.parse(raw));
		} catch (error) {
			console.error("Blog detail auto-refresh: failed to parse initial post", error);
		}

		let currentSignature = createSignature(currentPost);
		let reloadScheduled = false;
		const REFRESH_INTERVAL = 60_000;

		async function fetchLatestPost() {
			if (reloadScheduled) {
				return;
			}
			try {
				const response = await fetch(`/api/blog/${encodeURIComponent(slug)}.json`, {
					headers: { Accept: "application/json" },
					cache: "no-store",
				});
				if (!response.ok) {
					return;
				}
				const data = await response.json();
				const latestPost = normalizePost(data?.post);
				const signature = createSignature(latestPost);
				if (signature && signature !== currentSignature) {
					reloadScheduled = true;
					window.location.reload();
				}
			} catch (error) {
				const isAbortError =
					error instanceof DOMException ? error.name === "AbortError" : false;
				if (!isAbortError) {
					console.error("Blog detail auto-refresh: failed to fetch latest post", error);
				}
			}
		}

		function scheduleRefresh() {
			fetchLatestPost();
			setInterval(() => {
				if (!document.hidden) {
					fetchLatestPost();
				}
			}, REFRESH_INTERVAL);
		}

		document.addEventListener("visibilitychange", () => {
			if (!document.hidden) {
				fetchLatestPost();
			}
		});

		scheduleRefresh();
	}

	function normalizePost(raw) {
		if (!raw || typeof raw !== "object") {
			return null;
		}
		return {
			id: typeof raw.id === "string" ? raw.id : "",
			slug: typeof raw.slug === "string" ? raw.slug : "",
			title: typeof raw.title === "string" ? raw.title : "",
			html: typeof raw.html === "string" ? raw.html : "",
			createdAt: typeof raw.createdAt === "string" ? raw.createdAt : null,
			updatedAt: typeof raw.updatedAt === "string" ? raw.updatedAt : null,
		};
	}

	function createSignature(post) {
		if (!post) {
			return "";
		}
		return JSON.stringify({
			id: post.id,
			slug: post.slug,
			title: post.title,
			updatedAt: post.updatedAt,
			html: post.html,
		});
	}
</script>
