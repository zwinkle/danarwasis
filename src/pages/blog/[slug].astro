---
import BlogPost from "../../layouts/BlogPost.astro";
import type { MarkdownHeading } from "astro";
import {
	getNotionPost,
	getNotionPosts,
} from "../../lib/notion";

export const prerender = false;

const posts = await getNotionPosts();
const numOfPost = posts.length;
const params = Astro.params.slug;
const postIndex = posts.findIndex((post) => post.slug === params);
const postDetail = params ? await getNotionPost(params) : null;
function getAtIndex(index: number) {
	const target = posts[index];
	return target
		? {
			title: target.title,
			slug: target.slug,
		}
		: null;
}

function getExcerpt(html: string, sentences = 1): string {
	if (!html) return "";

	const plainText = html.replace(/<[^>]*>/g, " ");

	const cleanText = plainText.replace(/\s+/g, " ").trim();

	const words = cleanText.split(".");
	const excerpt = words.slice(0, sentences).join(".");

	return excerpt.trim();
}

if (!postDetail || postIndex === -1) {
	return Astro.rewrite("/404");
}

const pageData = {
	post: {
		html: postDetail.html,
		thumbnail: postDetail.thumbnail,
		title: postDetail.title,
		slug: postDetail.slug,
		description: getExcerpt(postDetail.html, 1),
		pubDate: new Date(postDetail.createdAt ?? new Date()),
		createdAt: postDetail.createdAt,
		updatedAt: postDetail.updatedAt,
		id: postDetail.id,
		headings: postDetail.headings,
		credit: postDetail.credit,
		tags: postDetail.tags,
	},
	numOfPost,
	params,
	postIndex,
};
const prevPost = getAtIndex(postIndex);
const nextPost = getAtIndex(postIndex);
// const prevPost = postIndex > 0 ? getAtIndex(postIndex - 1) : null;
// const nextPost = postIndex < numOfPost - 1 ? getAtIndex(postIndex + 1) : null;
const serializedPost = JSON.stringify(pageData.post).replace(/</g, "\\u003c");
---


<BlogPost
	title={pageData.post.title}
	thumbnail={pageData.post.thumbnail!}
	pubDate={pageData.post.pubDate}
	description={pageData.post.description}
	caption={pageData.post.credit ?? undefined}
	headings={pageData.post.headings as MarkdownHeading[]}>
	<section data-blog-content set:html={pageData.post.html} />
	
	<div class="grid gap-2">
		<div>
			<p>Tags:</p>
			<div class="flex gap-2 flex-wrap" data-blog-tags>
				{
					pageData.post.tags.map((tag) => (
						<a href={`/blog/tags/${tag}`} class="btn-normal decoration-none font-normal px-4">
							<span>{tag}</span>
						</a>
					))
				}
			</div>
		</div>
		<hr class="w-20 mx-auto px-10vw bg-gray h-1px opacity50" />
		
		<a
			href="/blog">
			<span class="inline-flex opacity50 items-center lg:justify-end gap-2 mt-4">
				<i class="i-myna-chevron-double-left" /> Kembali ke Blog
			</span>
		</a>
		<div class="grid lg:grid-cols-2 gap-2 mt-2">
			<div>
				{
					prevPost && (
						<a
							href={`/blog/${prevPost.slug}`}
							class="btn-normal decoration-none opacity-75 hover:(opacity-100 bg-#30344620) rounded-md transition-all duration-300 ease-in-out text-left flex flex-col gap-2 p-4">
							<span class="inline-flex opacity50 items-center gap-2">
								<i class="i-myna-chevron-double-left" /> Sebelumnya
							</span>
							<span>{prevPost.title}</span>
						</a>
					)
				}
			</div>

			<div>
				{
					nextPost && (
						<a
							href={`/blog/${nextPost.slug}`}
							class="btn-normal decoration-none opacity-75 hover:(opacity-100 bg-#30344620) rounded-md transition-all duration-300 ease-in-out flex flex-col gap-2 p-4 text-left lg:text-right">
							<span class="inline-flex opacity50 items-center lg:justify-end gap-2">
								Selanjutnya <i class="i-myna-chevron-double-right" />
							</span>
							<span>{nextPost.title}</span>
						</a>
					)
				}
			</div>
		</div>
	</div>
</BlogPost>

<script type="application/json" data-blog-post-detail data-blog-slug={params} set:html={serializedPost} is:inline></script>
<script type="module" is:inline>
	const detailScript = document.querySelector("script[data-blog-post-detail]");
	const slug = detailScript?.dataset.blogSlug ?? "";
	const originalTitle = document.title;
	if (!slug || !detailScript) {
		console.warn("Blog detail auto-refresh: missing slug or data script");
	} else {
		let currentPost = null;
		try {
			const raw = detailScript.textContent?.trim() ?? "{}";
			currentPost = normalizePost(JSON.parse(raw));
		} catch (error) {
			console.error("Blog detail auto-refresh: failed to parse initial post", error);
		}

		let currentSignature = createSignature(currentPost);
		const REFRESH_INTERVAL = 60_000;

		async function fetchLatestPost() {
			try {
				const response = await fetch(`/api/blog/${encodeURIComponent(slug)}.json`, {
					headers: { Accept: "application/json" },
					cache: "no-store",
				});
				if (!response.ok) {
					return;
				}
				const data = await response.json();
				const latestPost = normalizePost(data?.post);
				const signature = createSignature(latestPost);
				if (signature && signature !== currentSignature) {
					currentPost = latestPost;
					currentSignature = signature;
					renderPost(currentPost);
				}
			} catch (error) {
				const isAbortError =
					error instanceof DOMException ? error.name === "AbortError" : false;
				if (!isAbortError) {
					console.error("Blog detail auto-refresh: failed to fetch latest post", error);
				}
			}
		}

		function scheduleRefresh() {
			fetchLatestPost();
			setInterval(() => {
				if (!document.hidden) {
					fetchLatestPost();
				}
			}, REFRESH_INTERVAL);
		}

		document.addEventListener("visibilitychange", () => {
			if (!document.hidden) {
				fetchLatestPost();
			}
		});

		scheduleRefresh();
	}

	function renderPost(post) {
		if (!post) {
			return;
		}

		updateTitle(post);
		updateDate(post);
		updateContent(post);
		updateTags(post);
		updateThumbnail(post);
		updateHeadings(post);
		updateDocumentTitle(post);
	}

	function updateTitle(post) {
		const titleEl = document.querySelector("[data-blog-title]");
		if (!titleEl) {
			return;
		}
		titleEl.textContent = post.title || "";
		titleEl.id = slugify(post.title || "");
	}

	function updateDate(post) {
		const dateEl = document.querySelector("[data-blog-date]");
		if (!dateEl) {
			return;
		}
		if (post.createdAt) {
			const date = new Date(post.createdAt);
			if (!Number.isNaN(date.getTime())) {
				dateEl.textContent = formatPublishedDate(date);
				dateEl.setAttribute("datetime", date.toISOString());
				return;
			}
		}
		dateEl.textContent = "";
		dateEl.removeAttribute("datetime");
	}

	function updateContent(post) {
		const section = document.querySelector("[data-blog-content]");
		if (section) {
			section.innerHTML = post.html || "";
		}
	}

	function updateTags(post) {
		const tagsContainer = document.querySelector("[data-blog-tags]");
		if (!tagsContainer) {
			return;
		}
		const tags = Array.isArray(post.tags) ? post.tags : [];
		tagsContainer.innerHTML = tags
			.filter((tag) => typeof tag === "string" && tag.trim().length > 0)
			.map((tag) => {
				const value = tag.trim();
				const label = escapeHtml(value);
				const href = `/blog/tags/${encodeURIComponent(value)}`;
				return `<a href="${href}" class="btn-normal decoration-none font-normal px-4"><span>${label}</span></a>`;
			})
			.join("");
	}

	function updateThumbnail(post) {
		const header = document.querySelector("[data-blog-article] .mb-8");
		let figure = document.querySelector("[data-blog-figure]");
		let image = document.querySelector("[data-blog-image]");
		let caption = document.querySelector("[data-blog-caption]");
		const hasThumbnail = typeof post.thumbnail === "string" && post.thumbnail.length > 0;

		if (hasThumbnail) {
			if (!figure && header) {
				header.insertAdjacentHTML(
					"beforeend",
					`<figure class="w-full h-fit object-contain" data-blog-figure>
						<picture>
							<img data-blog-image src="${escapeAttribute(post.thumbnail)}" alt="Thumbnail for ${escapeAttribute(post.title || "")}" class="rounded-lg mt-8 shimmer aspect-video w-full h-auto" />
						</picture>
					</figure>`
				);
				figure = document.querySelector("[data-blog-figure]");
				image = document.querySelector("[data-blog-image]");
				caption = document.querySelector("[data-blog-caption]");
			}
			if (image) {
				image.setAttribute("src", post.thumbnail);
				image.setAttribute("alt", `Thumbnail for ${post.title || ""}`);
			}
			const credit = typeof post.credit === "string" ? post.credit.trim() : "";
			if (credit) {
				if (!caption && figure) {
					figure.insertAdjacentHTML(
						"beforeend",
						`<figcaption data-blog-caption class="text-xs mt-2 text-gray-500 dark:text-gray-400">Gambar: ${escapeHtml(credit)}</figcaption>`
					);
					caption = document.querySelector("[data-blog-caption]");
				}
				if (caption) {
					caption.textContent = `Gambar: ${credit}`;
				}
			} else if (caption) {
				caption.remove();
			}
		} else if (figure) {
			figure.remove();
		}
	}

	function updateHeadings(post) {
		const headings = Array.isArray(post.headings) ? post.headings : [];
		const indicatorContainer = document.querySelector("[data-blog-heading-indicators]");
		const tocContainer = document.querySelector("[data-blog-toc]");
		const mobileToc = document.querySelector("[data-blog-toc-mobile]");
		const titleSlug = slugify(post.title || "");
		const titleLabel = escapeHtml((post.title || "").trim());

		if (indicatorContainer) {
			indicatorContainer.innerHTML = headings
				.filter((item) => item && typeof item.slug === "string")
				.map((item) => {
					const slugValue = escapeHtml(item.slug);
					return `<div data-slug="${slugValue}" class="w-5 h-2 bg-l-on-base dark:bg-d-on-base rounded-sm transition-all duration-500 ease-in-out heading-indicator opacity-10"></div>`;
				})
				.join("");
		}

		const headingLinksDesktop = headings
			.filter((item) => item && typeof item.slug === "string")
			.map((item) => {
				const slugValue = escapeHtml(item.slug);
				const textValue = escapeHtml((item.text || "").trim());
				const depth = Number.isFinite(item.depth) ? Number(item.depth) : 0;
				return `<a href="#${slugValue}" class="text-xs transition-all duration-300 ease-in-out whitespace-pre-wrap px-2 hover:(bg-l-on-base/10 dark:bg-d-on-base/10 opacity-100) opacity-50 transition-all duration-100 ease-in-out rounded-sm py-1" style="margin-left: ${depth}rem;">${textValue}</a>`;
			})
			.join("");

		if (tocContainer) {
			tocContainer.innerHTML = `<a href="#${titleSlug}" class="text-xs transition-all duration-300 ease-in-out whitespace-pre-wrap px-2 hover:(bg-l-on-base/10 dark:bg-d-on-base/10 opacity-100) opacity-50 transition-all duration-100 ease-in-out rounded-sm py-1">${titleLabel}</a>${headingLinksDesktop}`;
		}

		const headingLinksMobile = headings
			.filter((item) => item && typeof item.slug === "string")
			.map((item) => {
				const slugValue = escapeHtml(item.slug);
				const textValue = escapeHtml((item.text || "").trim());
				const depth = Number.isFinite(item.depth) ? Number(item.depth) : 0;
				return `<a href="#${slugValue}" class="decoration-none" style="margin-left: ${depth}rem;">${textValue}</a>`;
			})
			.join("");

		if (mobileToc) {
			mobileToc.innerHTML = `<a href="#${titleSlug}" class="decoration-none">${titleLabel}</a>${headingLinksMobile}`;
		}

		window.dispatchEvent(new Event("blog:headings-updated"));
	}

	function updateDocumentTitle(post) {
		if (!post || !post.title) {
			return;
		}
		if (originalTitle && originalTitle.includes("|") && !document.title.includes(post.title)) {
			const parts = originalTitle.split("|");
			const suffix = parts.length > 1 ? parts.slice(1).join("|").trim() : "";
			document.title = suffix ? `${post.title} | ${suffix}` : post.title;
		} else {
			document.title = post.title;
		}
	}

	function normalizePost(raw) {
		if (!raw || typeof raw !== "object") {
			return null;
		}
		return {
			id: typeof raw.id === "string" ? raw.id : "",
			slug: typeof raw.slug === "string" ? raw.slug : "",
			title: typeof raw.title === "string" ? raw.title : "",
			html: typeof raw.html === "string" ? raw.html : "",
			thumbnail: typeof raw.thumbnail === "string" ? raw.thumbnail : "",
			credit: typeof raw.credit === "string" ? raw.credit : "",
			tags: Array.isArray(raw.tags) ? raw.tags : [],
			headings: Array.isArray(raw.headings) ? raw.headings : [],
			createdAt: typeof raw.createdAt === "string" ? raw.createdAt : null,
			updatedAt: typeof raw.updatedAt === "string" ? raw.updatedAt : null,
		};
	}

	function createSignature(post) {
		if (!post) {
			return "";
		}
		return JSON.stringify({
			id: post.id,
			slug: post.slug,
			title: post.title,
			updatedAt: post.updatedAt,
			html: post.html,
			thumbnail: post.thumbnail,
			credit: post.credit,
			tags: Array.isArray(post.tags) ? post.tags : [],
			headings: Array.isArray(post.headings)
				? post.headings.map((item) => ({
					depth: item?.depth,
					slug: item?.slug,
					text: item?.text,
				}))
				: [],
		});
	}

	function formatPublishedDate(date) {
		return date.toLocaleDateString("en-us", {
			year: "numeric",
			month: "short",
			day: "numeric",
		});
	}

	function slugify(value) {
		return (value || "").replace(/\s+/g, "-").toLowerCase();
	}

	function escapeHtml(value) {
		return String(value)
			.replace(/&/g, "&amp;")
			.replace(/</g, "&lt;")
			.replace(/>/g, "&gt;")
			.replace(/"/g, "&quot;")
			.replace(/'/g, "&#39;");
	}

	function escapeAttribute(value) {
		return escapeHtml(value).replace(/`/g, "&#96;");
	}
</script>
