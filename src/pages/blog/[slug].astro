---
import { getCollection, type CollectionEntry } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";
import type { MarkdownHeading } from "astro";

export const prerender = false;

type NormalizedPost = {
	entry: CollectionEntry<"blog">;
	slug: string;
	title: string;
	tags: string[];
	publishedAt: Date | null;
	thumbnail?: string;
	credit?: string;
	description?: string;
	heroImage?: string;
	idOnly?: boolean;
};

const extractString = (value: unknown): string | null => {
	if (typeof value === "string") return value;
	if (value && typeof value === "object") {
		if ("plain_text" in value && typeof (value as { plain_text?: unknown }).plain_text === "string") {
			return (value as { plain_text: string }).plain_text;
		}
		if ("value" in value && typeof (value as { value?: unknown }).value === "string") {
			return (value as { value: string }).value;
		}
		if ("name" in value && typeof (value as { name?: unknown }).name === "string") {
			return (value as { name: string }).name;
		}
	}
	return null;
};

const normalizeTags = (raw: unknown): string[] => {
	if (!raw) return [];
	if (Array.isArray(raw)) {
		return raw
			.map((value) => {
				if (typeof value === "string") return value;
				if (value && typeof value === "object") {
					if ("name" in value && typeof (value as { name?: unknown }).name === "string") {
						return (value as { name: string }).name;
					}
					if ("plain_text" in value && typeof (value as { plain_text?: unknown }).plain_text === "string") {
						return (value as { plain_text: string }).plain_text;
					}
					if ("value" in value && typeof (value as { value?: unknown }).value === "string") {
						return (value as { value: string }).value;
					}
				}
				return null;
			})
			.filter((tag): tag is string => Boolean(tag && tag.trim()))
			.map((tag) => tag.trim());
	}
	return [];
};

const getPublishedDate = (entry: CollectionEntry<"blog">, notionDate: unknown): Date | null => {
	if (typeof notionDate === "string") {
		const parsed = new Date(notionDate);
		if (!Number.isNaN(parsed.getTime())) return parsed;
	}
	const frontmatterDate = entry.data.pubDate;
	if (frontmatterDate instanceof Date) return frontmatterDate;
	if (typeof frontmatterDate === "string") {
		const parsed = new Date(frontmatterDate);
		if (!Number.isNaN(parsed.getTime())) return parsed;
	}
	return null;
};

const rawPosts = await getCollection("blog");

const normalizedPosts = rawPosts
	.map<NormalizedPost>((entry) => {
		const notionProps = (entry.data as any)?.properties ?? {};
		const slug =
			extractString(notionProps?.slug) ?? (typeof entry.data.slug === "string" ? entry.data.slug : entry.slug);
		const title =
			extractString(notionProps?.Name) ?? (typeof entry.data.title === "string" ? entry.data.title : entry.slug.replace(/-/g, " "));
		const tags = normalizeTags(notionProps?.tags ?? (entry.data as any)?.tags);
		const publishedAt = getPublishedDate(entry, notionProps?.created_at?.date?.start);
		const thumbnail = extractString(notionProps?.thumbnail) ?? entry.data.heroImage;
		const credit = extractString(notionProps?.credit) ?? (entry.data as any)?.credit;
		const description = extractString(notionProps?.description) ?? entry.data.description;

		return {
			entry,
			slug,
			title,
			tags,
			publishedAt,
			thumbnail,
			credit,
			description,
			heroImage: entry.data.heroImage,
			idOnly: entry.data.idOnly,
		};
	})
	.filter((post) => !post.entry.data.draft)
	.sort((a, b) => (b.publishedAt?.getTime() ?? 0) - (a.publishedAt?.getTime() ?? 0));

const numOfPost = normalizedPosts.length;
const rawSlug = Astro.params.slug;

if (!rawSlug) {
	return Astro.rewrite("/404");
}

const slug = decodeURIComponent(rawSlug);
const postIndex = normalizedPosts.findIndex((post) => post.slug === slug);

if (postIndex === -1) {
	return Astro.rewrite("/404");
}

const targetPost = normalizedPosts[postIndex];
const { Content, headings } = await targetPost.entry.render();

function getExcerpt(html: string, sentences = 1): string {
	if (!html) return "";

	const plainText = html.replace(/<[^>]*>/g, " ");

	const cleanText = plainText.replace(/\s+/g, " ").trim();

	const words = cleanText.split(".");
	const excerpt = words.slice(0, sentences).join(".");

	return excerpt.trim();
}

const rawBody = (targetPost.entry as any)?.body ?? "";
const derivedDescription = targetPost.description ?? getExcerpt(rawBody, 1);

const pageData = {
	post: {
		html: rawBody,
		thumbnail: targetPost.thumbnail ?? targetPost.heroImage ?? "",
		title: targetPost.title,
		slug: targetPost.slug,
		description: derivedDescription,
		pubDate: targetPost.publishedAt ?? new Date(),
		headings,
		credit: targetPost.credit,
		tags: targetPost.tags,
	},
	numOfPost,
	params: slug,
	postIndex,
};

const prevNormalized = postIndex > 0 ? normalizedPosts[postIndex - 1] : null;
const nextNormalized = postIndex < numOfPost - 1 ? normalizedPosts[postIndex + 1] : null;

const prevPost = prevNormalized ? { title: prevNormalized.title, slug: prevNormalized.slug } : null;
const nextPost = nextNormalized ? { title: nextNormalized.title, slug: nextNormalized.slug } : null;
---

<BlogPost
	title={pageData.post.title}
	thumbnail={pageData.post.thumbnail!}
	pubDate={pageData.post.pubDate}
	description={pageData.post.description}
	caption={pageData.post.credit}
	headings={pageData.post.headings as MarkdownHeading[]}>
	<Content />
	
	<div class="grid gap-2">
		<div>
			<p>Tags:</p>
			<div class="flex gap-2 flex-wrap">
				{
					pageData.post.tags.map((tag: string) => (
						<a href={`/blog/tags/${tag}`} class="btn-normal decoration-none font-normal px-4">
							<span>{tag}</span>
						</a>
					))
				}
			</div>
		</div>
		<hr class="w-20 mx-auto px-10vw bg-gray h-1px opacity50" />
		
		<a
			href="/blog">
			<span class="inline-flex opacity50 items-center lg:justify-end gap-2 mt-4">
				<i class="i-myna-chevron-double-left" /> Kembali ke Blog
			</span>
		</a>
		<div class="grid lg:grid-cols-2 gap-2 mt-2">
			<div>
				{
					prevPost && (
						<a
							href={`/blog/${prevPost.slug}`}
							class="btn-normal decoration-none opacity-75 hover:(opacity-100 bg-#30344620) rounded-md transition-all duration-300 ease-in-out text-left flex flex-col gap-2 p-4">
							<span class="inline-flex opacity50 items-center gap-2">
								<i class="i-myna-chevron-double-left" /> Sebelumnya
							</span>
							<span>{prevPost.title}</span>
						</a>
					)
				}
			</div>

			<div>
				{
					nextPost && (
						<a
							href={`/blog/${nextPost.slug}`}
							class="btn-normal decoration-none opacity-75 hover:(opacity-100 bg-#30344620) rounded-md transition-all duration-300 ease-in-out flex flex-col gap-2 p-4 text-left lg:text-right">
							<span class="inline-flex opacity50 items-center lg:justify-end gap-2">
								Selanjutnya <i class="i-myna-chevron-double-right" />
							</span>
							<span>{nextPost.title}</span>
						</a>
					)
				}
			</div>
		</div>
	</div>
</BlogPost>
